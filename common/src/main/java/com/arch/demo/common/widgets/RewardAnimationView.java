package com.arch.demo.common.widgets;import android.animation.Animator;import android.content.Context;import android.util.AttributeSet;import android.view.LayoutInflater;import android.view.View;import android.widget.FrameLayout;import com.airbnb.lottie.LottieAnimationView;import com.arch.demo.common.R;public class RewardAnimationView extends FrameLayout {    public interface OnAnimationListener {        void onAnimationFinish();    }    private Context mContext;    private LottieAnimationView mAnimation;    public RewardAnimationView(Context context) {        this(context, null);    }    public RewardAnimationView(Context context, AttributeSet attrs) {        this(context, attrs, 0);    }    public RewardAnimationView(Context context, AttributeSet attrs, int defStyleAttr) {        super(context, attrs, defStyleAttr);        init(context);    }    private void init(Context context) {        mContext = context;        View rootView = LayoutInflater.from(mContext).inflate(R.layout.widget_lottie_view_layout, this, false);        mAnimation = rootView.findViewById(R.id.lottieAnimationView);        addView(rootView);    }    /**     * 播放asses目录下的动画     *     * @param animName     */    public void playAnimationFormAssess(String animName) {        playAnimationFormAssess(animName, null);    }    public void playAnimationFormAssess(String animName, OnAnimationListener listener) {        mAnimation.setImageAssetsFolder("images");        mAnimation.setAnimation(animName);        mAnimation.playAnimation();        mAnimation.addAnimatorListener(new Animator.AnimatorListener() {            @Override            public void onAnimationStart(Animator animation) {            }            @Override            public void onAnimationEnd(Animator animation) {                if (listener != null) {                    listener.onAnimationFinish();                }                hide();            }            @Override            public void onAnimationCancel(Animator animation) {            }            @Override            public void onAnimationRepeat(Animator animation) {            }        });    }    public void playAnimationFormRaw(int rawFileName) {        playAnimationFormRaw(rawFileName, null);    }    /**     * 播放raw文件下的动画     *     * @param rawFileName     * @param listener     */    public void playAnimationFormRaw(int rawFileName, OnAnimationListener listener) {        setVisibility(View.VISIBLE);        mAnimation.setAnimation(rawFileName);        mAnimation.playAnimation();        mAnimation.addAnimatorListener(new Animator.AnimatorListener() {            @Override            public void onAnimationStart(Animator animation) {            }            @Override            public void onAnimationEnd(Animator animation) {                hide();                if (listener != null) {                    listener.onAnimationFinish();                }            }            @Override            public void onAnimationCancel(Animator animation) {            }            @Override            public void onAnimationRepeat(Animator animation) {            }        });    }    public void hide() {        setVisibility(View.GONE);    }}